generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                    String   @id @default(uuid())
  createdAt             DateTime @default(now())
  name                  String   @default("")
  slug                  String   @unique
  saleDate              DateTime
  contentReady          Boolean  @default(false)
  estimatedAPR          String
  minterContract        String
  projectContract       String
  yielderContract       String
  offseterContract      String
  vesterContract        String
  paymentContract       String
  paymentTokenDecimals  Int
  paymentTokenSymbol    String
  unitPrice             Float
  maxBuyPerTx           Int
  maxSupplyForMint      Int
  isDisplay             Boolean  @default(false)
  imageIpfs             String
  network               Network  @relation(fields: [networkId], references: [id])
  networkId             String 
  whitelistedSaleOpen   Boolean  @default(false)
  publicSaleOpen        Boolean  @default(false)
  whitelist             ProjectWhitelist?
}

// Whitelist is retrived from https://bal7hazar.github.io/whitelist-starknet/
model ProjectWhitelist {
  id           String   @id @default(uuid())
  whitelist    Json
  project      Project  @relation(fields: [projectId], references: [id])
  projectId    String   @unique
}

model Network {
  id            String   @id
  name          String   @unique
  chainId       String   @unique
  nodeUrl       String   @unique
  isDefault     Boolean  @default(false)
  order         Int
  projects      Project[]
  badgeContract BadgeContract?
}

model Snapshot {
  id            String   @id @default(uuid())
  snapshotDate  DateTime
} 

model Badge {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  image        String   @default("")
  title        String 
  subtitle     String  
  mintable     Boolean  @default(false)
  token_id     Int      @unique
  name1        String   @default("")
  name2        String   @default("")
}

model BadgeWhitelist {
  id           String   @id @default(uuid())
  whitelist    Json     @unique
}

model BadgeContract {
  id           String   @id @default(uuid())
  minter       String
  badge        String
  network      Network  @relation(fields: [networkId], references: [id])
  networkId    String   @unique
}